from pathlib import Path
from collections import defaultdict

import yara
from rich import print
from rich.console import Console
from rich.table import Table

FILES_DIR = "generated_files_v2"

YARA_RULES = """
rule SuspiciousC2URL
{
    meta:
        description = "Detects suspicious C2 communication domain"
        severity = "high"
        category = "network"
    strings:
        $url = "http://malicious.c2-server.c0d.ist"
    condition:
        $url
}

rule SuspiciousHexPattern
{
    meta:
        description = "Detects suspicious hex patter"
        severity = "high"
    strings:
        $pattern = { FC E8 82 00 }
    condition:
        $pattern
}
"""

def load_yara_rules():
    return yara.compile(source=YARA_RULES)


def scan_directory(rules, directory):
    match_results = []
    rule_usage = defaultdict(int)

    for file in Path(directory).glob("*"):
        try:
            matches = rules.match(str(file))
            if matches:
                matched_rules = [m.rule for m in matches]
                match_results.append((file.name, matched_rules))
                for rule in matched_rules:
                    rule_usage[rule] += 1
        except Exception as e:
            print(f"[yellow]Warning scanning {file}: {e}[/yellow]")

    return match_results, rule_usage


def display_results(matches, rule_usage, total_files):
    console = Console()

    table = Table(title="ðŸ“Š YARA Scan Results", show_lines=True)
    table.add_column("File", style="cyan", no_wrap=True)
    table.add_column("Matched Rules", style="magenta")

    for fname, rule_names in matches:
        table.add_row(fname, ", ".join(rule_names))

    if not matches:
        console.print("[green]âœ” No suspicious patterns detected.[/green]")
    else:
        console.print(table)

    matched_files = len(matches)
    triggered_rules = len(rule_usage)

    # === Stats Summary ===
    console.print("\n[bold blue] Detection Summary[/bold blue]")
    summary_table = Table(title="Summary", show_lines=False)
    summary_table.add_column("Metric", style="green")
    summary_table.add_column("Value", style="bold")

    summary_table.add_row("Rules Triggered", f"{triggered_rules}")
    summary_table.add_row("Total Files Scanned", str(total_files))
    summary_table.add_row("Files Matched", f"{matched_files} ({(matched_files / total_files) * 100:.1f}%)")

    console.print(summary_table)


def main():
    print("[bold blue] Scanning files with YARA...[/bold blue]")
    rules = load_yara_rules()
    files = list(Path(FILES_DIR).glob("*"))
    total_files = len(files)

    match_results, rule_usage = scan_directory(rules, FILES_DIR)
    display_results(match_results, rule_usage, total_files)


if __name__ == "__main__":
    main()
