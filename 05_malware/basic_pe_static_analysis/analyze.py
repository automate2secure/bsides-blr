import pefile
import hashlib
import re
import math
import os
from collections import Counter
from datetime import datetime

SUSPICIOUS_APIS = {
    "VirtualAlloc", "WriteProcessMemory", "CreateRemoteThread",
    "WinExec", "ShellExecuteA", "LoadLibrary", "GetProcAddress",
    "InternetOpenUrlA", "URLDownloadToFileA", "RegSetValueExA"
}

def calc_entropy(data):
    if not data:
        return 0.0
    entropy = 0
    counter = Counter(data)
    length = len(data)
    for count in counter.values():
        p = count / length
        entropy -= p * math.log2(p)
    return entropy

def extract_strings(filepath, min_length=4):
    with open(filepath, 'rb') as f:
        data = f.read()
    pattern = rb"[ -~]{%d,}" % min_length
    strings = re.findall(pattern, data)
    decoded = [s.decode('latin-1', errors='ignore') for s in strings]
    return decoded

def highlight_suspicious_strings(strings):
    susp = []
    for s in strings:
        if re.search(r'https?://', s) or re.search(r'\d+\.\d+\.\d+\.\d+', s):
            susp.append(s)
    return susp

def analyze_pe_file(file_path):
    try:
        pe = pefile.PE(file_path)
    except Exception as e:
        print(f"[-] Error loading PE file: {e}")
        return

    print("\n" + "="*60)
    print(f"[+] Analyzing: {file_path}")
    print("="*60)

    with open(file_path, 'rb') as f:
        raw = f.read()
        print("MD5     :", hashlib.md5(raw).hexdigest())
        print("SHA1    :", hashlib.sha1(raw).hexdigest())
        print("SHA256  :", hashlib.sha256(raw).hexdigest())

    print("Architecture:", "32-bit" if pe.FILE_HEADER.Machine == 0x14c else "64-bit")
    timestamp = datetime.utcfromtimestamp(pe.FILE_HEADER.TimeDateStamp)
    print("Compile Time :", timestamp.strftime('%Y-%m-%d %H:%M:%S UTC'))

    print("\n[+] Sections and Entropy:")
    for section in pe.sections:
        name = section.Name.rstrip(b'\x00').decode(errors='ignore')
        entropy = calc_entropy(section.get_data())
        print(f" - {name:10} | Size: {section.SizeOfRawData:6} | Entropy: {entropy:.2f}")

    print("\n[+] Imported DLLs and APIs:")
    try:
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            dll = entry.dll.decode()
            print(f" DLL: {dll}")
            for imp in entry.imports:
                if imp.name:
                    api = imp.name.decode()
                    suspicious = " <== suspicious" if api in SUSPICIOUS_APIS else ""
                    print(f"    |- {api}{suspicious}")
    except AttributeError:
        print(" No imports found.")

    print("\n[+] Extracting Suspicious Strings:")
    all_strings = extract_strings(file_path)
    susp_strings = highlight_suspicious_strings(all_strings)
    for s in susp_strings:
        print(f"  - {s}")

    print("\n[+] Static analysis complete.\n")

def scan_directory(directory):
    for root, _, files in os.walk(directory):
        for name in files:
            if name.lower().endswith(('.exe', '.dll')):
                analyze_pe_file(os.path.join(root, name))

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Static Malware Analysis Tool")
    parser.add_argument("path", help="File or directory to analyze")
    args = parser.parse_args()

    if os.path.isfile(args.path):
        analyze_pe_file(args.path)
    elif os.path.isdir(args.path):
        scan_directory(args.path)
    else:
        print("[-] Invalid file or directory path.")
