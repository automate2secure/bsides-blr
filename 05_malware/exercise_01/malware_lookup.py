import json
import os
import hashlib
import requests
import argparse

# Replace with your actual API keys
VT_API_KEY = os.environ["VT_API_KEY"]
HA_API_KEY = os.environ["HA_API_KEY"]


def sha256sum(filename):
    h = hashlib.sha256()
    try:
        with open(filename, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                h.update(chunk)
    except Exception as e:
        print(f"Could not read file {filename}: {e}")
        return None
    return h.hexdigest()


def vt_lookup(sha256):
    url = f"https://www.virustotal.com/api/v3/files/{sha256}"
    headers = {"x-apikey": VT_API_KEY}
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            json_data = response.json()
            stats = (
                json_data.get("data", {})
                .get("attributes", {})
                .get("last_analysis_stats", {})
            )
            return stats
        else:
            return {
                "error": response.json()
                .get("error", {})
                .get("message", "Unknown error")
            }
    except Exception as e:
        return {"error": str(e)}


def ha_lookup(sha256):
    headers = {"api-key": HA_API_KEY, "user-agent": "Falcon Sandbox"}
    url = f"https://www.hybrid-analysis.com/api/v2/search/hash"
    params = {"hash": sha256}
    try:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200 and response.json():
            json_reponse = response.json()

            return json_reponse.get("reports") or []
        else:
            return {"error": "Not found or error"}
    except Exception as e:
        return {"error": str(e)}


def process_folder(folder_path):
    results = []

    for root, dirs, files in os.walk(folder_path):
        for file in files:
            filepath = os.path.join(root, file)
            file_hash = sha256sum(filepath)
            if not file_hash:
                continue

            print(f"\nFile: {filepath}")
            print(f"SHA-256: {file_hash}")

            vt_result = vt_lookup(file_hash)
            # print("VirusTotal:", vt_result)

            ha_result = ha_lookup(file_hash)
            # print("Hybrid Analysis:", ha_result)

            results.append(
                {
                    "file": filepath,
                    "sha256": file_hash,
                    "virustotal": vt_result,
                    "hybrid_analysis": ha_result,
                }
            )

    return results


def main():
    parser = argparse.ArgumentParser(
        description="Malware file hash scanner and lookup tool."
    )
    parser.add_argument("--folder", required=True, help="Folder path to scan")
    args = parser.parse_args()

    folder_path = args.folder
    if not os.path.isdir(folder_path):
        print("[ERROR] Folder does not exist or is not a directory.")
        return

    results = process_folder(folder_path)
    with open("analysis.json", "w") as f:
        f.write(json.dumps(results, indent=4))


if __name__ == "__main__":
    main()

    # python3 malware_lookup.py --folder folder_name
